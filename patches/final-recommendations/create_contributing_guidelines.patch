--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,300 @@
+# دليل المساهمة في المشروع
+
+## نظرة عامة
+
+هذا الدليل يوضح كيفية المساهمة في المشروع بطريقة صحيحة ومنظمة. يهدف إلى منع الصراعات والتضارب في الكود.
+
+## قواعد التطوير
+
+### 1. تسمية ملفات الاختبار
+
+#### قاعدة أساسية: أسماء فريدة ومحددة
+- **ممنوع**: استخدام نفس الاسم في مجلدات مختلفة
+- **مطلوب**: استخدام بادئة المجلد في اسم الملف
+
+#### أمثلة صحيحة:
+```
+tests/Unit/Services/ProductServiceTest.php
+tests/Feature/Services/ProductServiceTest.php
+tests/Integration/Services/ProductServiceTest.php
+```
+
+#### أمثلة خاطئة:
+```
+tests/Unit/AI/AIModelPerformanceTest.php
+tests/AI/AIModelPerformanceTest.php  ❌ (اسم مكرر)
+```
+
+#### التصحيح:
+```
+tests/Unit/AI/UnitAIModelPerformanceTest.php
+tests/AI/AIAIModelPerformanceTest.php
+```
+
+### 2. إعدادات PHPUnit
+
+#### قاعدة أساسية: ملف واحد فقط
+- **ممنوع**: إنشاء ملفات `phpunit.*.xml` متعددة
+- **مطلوب**: استخدام `phpunit.xml` الوحيد مع `<groups>`
+
+#### البنية الصحيحة:
+```xml
+<phpunit>
+  <testsuites>
+    <testsuite name="Unit">
+      <directory suffix="Test.php">./tests/Unit</directory>
+    </testsuite>
+    <testsuite name="Feature">
+      <directory suffix="Test.php">./tests/Feature</directory>
+    </testsuite>
+  </testsuites>
+  <groups>
+    <group name="strict"/>
+    <group name="ai"/>
+    <group name="testing"/>
+  </groups>
+</phpunit>
+```
+
+#### التشغيل:
+```bash
+# تشغيل اختبارات محددة
+php artisan test --group=strict
+php artisan test --group=ai
+php artisan test --group=testing
+```
+
+### 3. إعدادات CI/CD
+
+#### قاعدة أساسية: ملف واحد فقط
+- **ممنوع**: إنشاء ملفات `.gitlab-ci-*.yml` متعددة
+- **مطلوب**: استخدام `.gitlab-ci.yml` الوحيد
+
+#### البنية الصحيحة:
+```yaml
+stages:
+  - static-analysis
+  - analyze
+  - test
+  - deploy
+
+# كل وظيفة لها تعليق يوضح الغرض منها
+static_analysis:
+  stage: static-analysis
+  # الغرض: تحليل ثابت للكود قبل الاختبارات
+  script:
+    - ./vendor/bin/phpstan analyse
+```
+
+### 4. إعدادات Docker
+
+#### قاعدة أساسية: عدم استبعاد ملفات مهمة
+- **ممنوع**: استبعاد مجلد `tests/` من Docker
+- **مطلوب**: تضمين جميع الملفات الضرورية
+
+#### البنية الصحيحة:
+```dockerfile
+# .dockerignore
+node_modules/
+vendor/
+.git/
+*.log
+# لا تستبعد tests/ - مطلوبة للتشغيل
+```
+
+### 5. ملفات التكوين المفقودة
+
+#### قاعدة أساسية: إنشاء جميع الملفات المطلوبة
+- **مطلوب**: وجود `.eslintignore` و `.stylelintrc.json`
+- **مطلوب**: توثيق جميع الملفات
+
+#### الملفات المطلوبة:
+```
+.eslintignore          # استبعاد ملفات من ESLint
+.stylelintrc.json      # إعدادات Stylelint
+.dockerignore          # استبعاد ملفات من Docker
+.gitignore             # استبعاد ملفات من Git
+```
+
+## عملية المساهمة
+
+### 1. قبل البدء
+```bash
+# 1. تأكد من أن المشروع يعمل
+composer install
+npm install
+php artisan test
+
+# 2. تأكد من عدم وجود صراعات
+git status
+git pull origin main
+```
+
+### 2. أثناء التطوير
+
+#### إنشاء ملفات اختبار جديدة:
+```bash
+# 1. تحقق من عدم وجود اسم مكرر
+find tests -name "*TestName*" -type f
+
+# 2. استخدم اسم فريد
+touch tests/Unit/Services/UnitServiceNameTest.php
+```
+
+#### تعديل إعدادات PHPUnit:
+```bash
+# 1. لا تنشئ ملفات جديدة
+# 2. عدّل phpunit.xml فقط
+# 3. استخدم <groups> للتصنيف
+```
+
+#### تعديل إعدادات CI/CD:
+```bash
+# 1. لا تنشئ ملفات جديدة
+# 2. عدّل .gitlab-ci.yml فقط
+# 3. أضف تعليقات توضيحية
+```
+
+### 3. قبل الالتزام
+```bash
+# 1. تشغيل الاختبارات
+php artisan test
+
+# 2. تشغيل فحص الجودة
+composer run fix:rector
+composer run fix:all
+
+# 3. تشغيل Linters
+npx eslint .
+npx stylelint "**/*.css"
+
+# 4. تشغيل التنظيف
+composer run cleanup
+```
+
+### 4. رسالة الالتزام
+```bash
+# استخدم تنسيق واضح
+git commit -m "feat: add new feature
+
+- إضافة ميزة جديدة
+- إصلاح مشكلة في الاختبارات
+- تحديث الوثائق
+
+Closes #123"
+```
+
+## منع الصراعات
+
+### 1. فحص دوري
+```bash
+# تشغيل فحص شامل كل أسبوع
+composer run cleanup
+php artisan test
+composer run fix:all
+```
+
+### 2. مراجعة الكود
+- تحقق من أسماء الملفات قبل الالتزام
+- تأكد من عدم إنشاء ملفات تكوين مكررة
+- راجع إعدادات CI/CD قبل التعديل
+
+### 3. التوثيق
+- وثّق جميع التغييرات في الإعدادات
+- أضف تعليقات توضيحية للوظائف المعقدة
+- حدث README عند إضافة ميزات جديدة
+
+## حل المشاكل
+
+### 1. صراع أسماء الملفات
+```bash
+# البحث عن أسماء مكررة
+find tests -name "*.php" -type f | sort | uniq -d
+
+# إعادة تسمية الملفات
+git mv tests/Unit/AI/OldName.php tests/Unit/AI/UnitOldName.php
+```
+
+### 2. صراع إعدادات PHPUnit
+```bash
+# حذف الملفات المكررة
+rm phpunit.*.xml
+# الاحتفاظ بـ phpunit.xml فقط
+```
+
+### 3. صراع إعدادات CI/CD
+```bash
+# حذف الملفات القديمة
+rm .gitlab-ci-*.yml
+# الاحتفاظ بـ .gitlab-ci.yml فقط
+```
+
+## الأدوات المساعدة
+
+### 1. سكريبت التنظيف
+```bash
+# تشغيل التنظيف التلقائي
+composer run cleanup
+```
+
+### 2. فحص الجودة
+```bash
# إصلاح تلقائي للكود
+composer run fix:all
+
+# فحص شامل
+composer run check:all
+```
+
+### 3. الاختبارات
+```bash
+# تشغيل جميع الاختبارات
+php artisan test
+
+# تشغيل اختبارات محددة
+php artisan test --group=strict
+php artisan test tests/Unit/
+```
+
+## الدعم
+
+إذا واجهت مشاكل أو لديك أسئلة:
+1. راجع هذا الدليل أولاً
+2. ابحث في Issues الموجودة
+3. أنشئ Issue جديد مع تفاصيل المشكلة
+
+---
+
+**تذكر**: الهدف هو الحفاظ على جودة الكود ومنع الصراعات. اتبع هذه القواعد وستساهم في نجاح المشروع.
