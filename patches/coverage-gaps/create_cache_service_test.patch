--- /dev/null
+++ b/tests/Unit/Services/CacheServiceTest.php
@@ -0,0 +1,200 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Tests\Unit\Services;
+
+use App\Services\CacheService;
+use Illuminate\Foundation\Testing\RefreshDatabase;
+use Illuminate\Support\Facades\Cache;
+use Tests\TestCase;
+use Mockery;

+class CacheServiceTest extends TestCase
+{
+    use RefreshDatabase;
+
+    private CacheService $cacheService;
+
+    protected function setUp(): void
+    {
+        parent::setUp();
+        $this->cacheService = new CacheService();
+    }
+
+    protected function tearDown(): void
+    {
+        Cache::flush();
+        Mockery::close();
+        parent::tearDown();
+    }
+
+    public function test_remember_stores_and_returns_value(): void
+    {
+        // Arrange
+        $key = 'test-key';
+        $value = 'test-value';
+        $ttl = 3600;
+        $callback = fn() => $value;
+
+        // Act
+        $result = $this->cacheService->remember($key, $ttl, $callback);
+
+        // Assert
+        $this->assertEquals($value, $result);
+        $this->assertTrue(Cache::has($key));
+    }
+
+    public function test_remember_returns_cached_value_when_exists(): void
+    {
+        // Arrange
+        $key = 'test-key';
+        $value = 'test-value';
+        $ttl = 3600;
+        $callback = fn() => $value;
+
+        // First call to store the value
+        $this->cacheService->remember($key, $ttl, $callback);
+
+        // Second call should return cached value
+        $newCallback = fn() => 'new-value';
+        $result = $this->cacheService->remember($key, $ttl, $newCallback);
+
+        // Assert
+        $this->assertEquals($value, $result);
+        $this->assertNotEquals('new-value', $result);
+    }
+
+    public function test_remember_executes_callback_when_cache_miss(): void
+    {
+        // Arrange
+        $key = 'test-key';
+        $ttl = 3600;
+        $callbackExecuted = false;
+        $callback = function() use (&$callbackExecuted) {
+            $callbackExecuted = true;
+            return 'callback-result';
+        };
+
+        // Act
+        $result = $this->cacheService->remember($key, $ttl, $callback);
+
+        // Assert
+        $this->assertTrue($callbackExecuted);
+        $this->assertEquals('callback-result', $result);
+    }
+
+    public function test_remember_does_not_execute_callback_when_cache_hit(): void
+    {
+        // Arrange
+        $key = 'test-key';
+        $ttl = 3600;
+        $callbackExecuted = false;
+        $callback = function() use (&$callbackExecuted) {
+            $callbackExecuted = true;
+            return 'callback-result';
+        };
+
+        // First call
+        $this->cacheService->remember($key, $ttl, $callback);
+        $callbackExecuted = false;
+
+        // Second call
+        $result = $this->cacheService->remember($key, $ttl, $callback);
+
+        // Assert
+        $this->assertFalse($callbackExecuted);
+        $this->assertEquals('callback-result', $result);
+    }
+
+    public function test_remember_handles_array_values(): void
+    {
+        // Arrange
+        $key = 'test-array-key';
+        $value = ['key1' => 'value1', 'key2' => 'value2'];
+        $ttl = 3600;
+        $callback = fn() => $value;
+
+        // Act
+        $result = $this->cacheService->remember($key, $ttl, $callback);
+
+        // Assert
+        $this->assertEquals($value, $result);
+        $this->assertIsArray($result);
+    }
+
+    public function test_remember_handles_object_values(): void
+    {
+        // Arrange
+        $key = 'test-object-key';
+        $value = (object) ['property' => 'value'];
+        $ttl = 3600;
+        $callback = fn() => $value;
+
+        // Act
+        $result = $this->cacheService->remember($key, $ttl, $callback);
+
+        // Assert
+        $this->assertEquals($value, $result);
+        $this->assertIsObject($result);
+    }
+
+    public function test_remember_handles_null_values(): void
+    {
+        // Arrange
+        $key = 'test-null-key';
+        $value = null;
+        $ttl = 3600;
+        $callback = fn() => $value;
+
+        // Act
+        $result = $this->cacheService->remember($key, $ttl, $callback);
+
+        // Assert
+        $this->assertNull($result);
+    }
+
+    public function test_remember_respects_ttl(): void
+    {
+        // Arrange
+        $key = 'test-ttl-key';
+        $value = 'test-value';
+        $ttl = 1; // 1 second
+        $callback = fn() => $value;
+
+        // Act
+        $result = $this->cacheService->remember($key, $ttl, $callback);
+
+        // Assert
+        $this->assertEquals($value, $result);
+        $this->assertTrue(Cache::has($key));
+
+        // Wait for TTL to expire
+        sleep(2);
+
+        // Should not be in cache anymore
+        $this->assertFalse(Cache::has($key));
+    }
+
+    public function test_forget_removes_key_from_cache(): void
+    {
+        // Arrange
+        $key = 'test-forget-key';
+        $value = 'test-value';
+        $ttl = 3600;
+        $callback = fn() => $value;
+
+        // Store value in cache
+        $this->cacheService->remember($key, $ttl, $callback);
+        $this->assertTrue(Cache::has($key));
+
+        // Act
+        $this->cacheService->forget($key);
+
+        // Assert
+        $this->assertFalse(Cache::has($key));
+    }
+
+    public function test_forget_handles_non_existent_key(): void
+    {
+        // Arrange
+        $key = 'non-existent-key';
+
+        // Act & Assert - should not throw exception
+        $this->expectNotToPerformAssertions();
+        $this->cacheService->forget($key);
+    }
+
+    public function test_forget_by_tags_removes_keys_with_matching_tags(): void
+    {
+        // Arrange
+        $key1 = 'test-tag-key-1';
+        $key2 = 'test-tag-key-2';
+        $key3 = 'test-no-tag-key';
+        $value = 'test-value';
+        $ttl = 3600;
+        $callback = fn() => $value;
+        $tags = ['products'];
+
+        // Store values with tags
+        $this->cacheService->remember($key1, $ttl, $callback, $tags);
+        $this->cacheService->remember($key2, $ttl, $callback, $tags);
+        $this->cacheService->remember($key3, $ttl, $callback, ['other']);
+
+        // Act
+        $this->cacheService->forgetByTags($tags);
+
+        // Assert
+        $this->assertFalse(Cache::has($key1));
+        $this->assertFalse(Cache::has($key2));
+        $this->assertTrue(Cache::has($key3));
+    }
+
+    public function test_forget_by_tags_handles_empty_tags(): void
+    {
+        // Arrange
+        $tags = [];
+
+        // Act & Assert - should not throw exception
+        $this->expectNotToPerformAssertions();
+        $this->cacheService->forgetByTags($tags);
+    }
+
+    public function test_remember_with_tags_stores_value_with_tags(): void
+    {
+        // Arrange
+        $key = 'test-tagged-key';
+        $value = 'test-value';
+        $ttl = 3600;
+        $callback = fn() => $value;
+        $tags = ['products', 'featured'];
+
+        // Act
+        $result = $this->cacheService->remember($key, $ttl, $callback, $tags);
+
+        // Assert
+        $this->assertEquals($value, $result);
+        $this->assertTrue(Cache::has($key));
+    }
+
+    public function test_remember_with_multiple_tags(): void
+    {
+        // Arrange
+        $key = 'test-multi-tag-key';
+        $value = 'test-value';
+        $ttl = 3600;
+        $callback = fn() => $value;
+        $tags = ['products', 'featured', 'sale'];
+
+        // Act
+        $result = $this->cacheService->remember($key, $ttl, $callback, $tags);
+
+        // Assert
+        $this->assertEquals($value, $result);
+        $this->assertTrue(Cache::has($key));
+    }
+
+    public function test_remember_handles_callback_exception(): void
+    {
+        // Arrange
+        $key = 'test-exception-key';
+        $ttl = 3600;
+        $callback = function() {
+            throw new \Exception('Callback error');
+        };
+
+        // Act & Assert
+        $this->expectException(\Exception::class);
+        $this->expectExceptionMessage('Callback error');
+        $this->cacheService->remember($key, $ttl, $callback);
+    }
+
+    public function test_remember_handles_callback_returning_false(): void
+    {
+        // Arrange
+        $key = 'test-false-key';
+        $value = false;
+        $ttl = 3600;
+        $callback = fn() => $value;
+
+        // Act
+        $result = $this->cacheService->remember($key, $ttl, $callback);
+
+        // Assert
+        $this->assertFalse($result);
+        $this->assertTrue(Cache::has($key));
+    }
+
+    public function test_remember_handles_callback_returning_zero(): void
+    {
+        // Arrange
+        $key = 'test-zero-key';
+        $value = 0;
+        $ttl = 3600;
+        $callback = fn() => $value;
+
+        // Act
+        $result = $this->cacheService->remember($key, $ttl, $callback);
+
+        // Assert
+        $this->assertEquals(0, $result);
+        $this->assertTrue(Cache::has($key));
+    }
+}
