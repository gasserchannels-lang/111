--- /dev/null
+++ b/tests/Unit/Console/Commands/LinkCheckerCommandTest.php
@@ -0,0 +1,200 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Tests\Unit\Console\Commands;
+
+use App\Console\Commands\LinkCheckerCommand;
+use Illuminate\Foundation\Testing\RefreshDatabase;
+use Illuminate\Support\Facades\File;
+use Illuminate\Support\Facades\Http;
+use Illuminate\Support\Facades\Route;
+use Tests\TestCase;
+use Mockery;

+class LinkCheckerCommandTest extends TestCase
+{
+    use RefreshDatabase;
+
+    private LinkCheckerCommand $command;
+
+    protected function setUp(): void
+    {
+        parent::setUp();
+        $this->command = new LinkCheckerCommand();
+    }
+
+    protected function tearDown(): void
+    {
+        Mockery::close();
+        parent::tearDown();
+    }
+
+    public function test_command_has_correct_signature(): void
+    {
+        // Assert
+        $this->assertEquals('links:check', $this->command->getName());
+        $this->assertStringContainsString('--external', $this->command->getDefinition()->getOption('external')->getName());
+        $this->assertStringContainsString('--internal', $this->command->getDefinition()->getOption('internal')->getName());
+        $this->assertStringContainsString('--all', $this->command->getDefinition()->getOption('all')->getName());
+    }
+
+    public function test_command_has_correct_description(): void
+    {
+        // Assert
+        $this->assertEquals('Check all links for broken URLs and accessibility issues', $this->command->getDescription());
+    }
+
+    public function test_handle_returns_zero_when_no_broken_links(): void
+    {
+        // Arrange
+        Http::fake([
+            '*' => Http::response('OK', 200),
+        ]);
+
+        // Act
+        $result = $this->command->handle();
+
+        // Assert
+        $this->assertEquals(0, $result);
+    }
+
+    public function test_handle_returns_one_when_broken_links_found(): void
+    {
+        // Arrange
+        Http::fake([
+            '*' => Http::response('Not Found', 404),
+        ]);
+
+        // Act
+        $result = $this->command->handle();
+
+        // Assert
+        $this->assertEquals(1, $result);
+    }
+
+    public function test_handle_checks_internal_links_when_internal_option_provided(): void
+    {
+        // Arrange
+        Http::fake([
+            '*' => Http::response('OK', 200),
+        ]);
+
+        // Act
+        $this->artisan('links:check --internal')
+            ->expectsOutput('🔗 Starting comprehensive link checking...')
+            ->expectsOutput('🔍 Checking internal links...')
+            ->expectsOutput('📊 Link Check Report')
+            ->expectsOutput('==================')
+            ->expectsOutput('✅ All links are working correctly!')
+            ->assertExitCode(0);
+    }
+
+    public function test_handle_checks_external_links_when_external_option_provided(): void
+    {
+        // Arrange
+        Http::fake([
+            '*' => Http::response('OK', 200),
+        ]);
+
+        // Act
+        $this->artisan('links:check --external')
+            ->expectsOutput('🔗 Starting comprehensive link checking...')
+            ->expectsOutput('🌐 Checking external links...')
+            ->expectsOutput('📊 Link Check Report')
+            ->expectsOutput('==================')
+            ->expectsOutput('✅ All links are working correctly!')
+            ->assertExitCode(0);
+    }
+
+    public function test_handle_checks_all_links_when_all_option_provided(): void
+    {
+        // Arrange
+        Http::fake([
+            '*' => Http::response('OK', 200),
+        ]);
+
+        // Act
+        $this->artisan('links:check --all')
+            ->expectsOutput('🔗 Starting comprehensive link checking...')
+            ->expectsOutput('🔍 Checking internal links...')
+            ->expectsOutput('🌐 Checking external links...')
+            ->expectsOutput('📊 Link Check Report')
+            ->expectsOutput('==================')
+            ->expectsOutput('✅ All links are working correctly!')
+            ->assertExitCode(0);
+    }
+
+    public function test_handle_checks_all_links_when_no_options_provided(): void
+    {
+        // Arrange
+        Http::fake([
+            '*' => Http::response('OK', 200),
+        ]);
+
+        // Act
+        $this->artisan('links:check')
+            ->expectsOutput('🔗 Starting comprehensive link checking...')
+            ->expectsOutput('🔍 Checking internal links...')
+            ->expectsOutput('🌐 Checking external links...')
+            ->expectsOutput('📊 Link Check Report')
+            ->expectsOutput('==================')
+            ->expectsOutput('✅ All links are working correctly!')
+            ->assertExitCode(0);
+    }
+
+    public function test_handle_reports_broken_links_correctly(): void
+    {
+        // Arrange
+        Http::fake([
+            'https://example.com' => Http::response('Not Found', 404),
+            'https://working.com' => Http::response('OK', 200),
+        ]);
+
+        // Act
+        $this->artisan('links:check --external')
+            ->expectsOutput('🔗 Starting comprehensive link checking...')
+            ->expectsOutput('🌐 Checking external links...')
+            ->expectsOutput('📊 Link Check Report')
+            ->expectsOutput('==================')
+            ->expectsOutput('❌ Broken Links Found:')
+            ->assertExitCode(1);
+    }
+
+    public function test_handle_handles_http_exceptions(): void
+    {
+        // Arrange
+        Http::fake([
+            '*' => Http::response('Connection Error', 500),
+        ]);
+
+        // Act
+        $this->artisan('links:check --external')
+            ->expectsOutput('🔗 Starting comprehensive link checking...')
+            ->expectsOutput('🌐 Checking external links...')
+            ->expectsOutput('📊 Link Check Report')
+            ->expectsOutput('==================')
+            ->expectsOutput('❌ Broken Links Found:')
+            ->assertExitCode(1);
+    }
+
+    public function test_handle_handles_timeout_exceptions(): void
+    {
+        // Arrange
+        Http::fake([
+            '*' => function () {
+                throw new \Exception('Connection timeout');
+            },
+        ]);
+
+        // Act
+        $this->artisan('links:check --external')
+            ->expectsOutput('🔗 Starting comprehensive link checking...')
+            ->expectsOutput('🌐 Checking external links...')
+            ->expectsOutput('📊 Link Check Report')
+            ->expectsOutput('==================')
+            ->expectsOutput('❌ Broken Links Found:')
+            ->assertExitCode(1);
+    }
+
+    public function test_get_link_type_identifies_internal_links(): void
+    {
+        // Arrange
+        $internalUrl = url('/test');
+        $externalUrl = 'https://example.com';
+
+        // Act
+        $internalType = $this->invokeMethod($this->command, 'getLinkType', [$internalUrl]);
+        $externalType = $this->invokeMethod($this->command, 'getLinkType', [$externalUrl]);
+
+        // Assert
+        $this->assertEquals('internal', $internalType);
+        $this->assertEquals('external', $externalType);
+    }
+
+    public function test_handle_saves_report_to_file(): void
+    {
+        // Arrange
+        Http::fake([
+            '*' => Http::response('OK', 200),
+        ]);
+
+        // Act
+        $this->artisan('links:check --external')
+            ->expectsOutput('🔗 Starting comprehensive link checking...')
+            ->expectsOutput('🌐 Checking external links...')
+            ->expectsOutput('📊 Link Check Report')
+            ->expectsOutput('==================')
+            ->expectsOutput('✅ All links are working correctly!')
+            ->expectsOutput('📁 Report saved to: ' . storage_path('logs/link-check-report.json'))
+            ->assertExitCode(0);
+
+        // Assert
+        $this->assertFileExists(storage_path('logs/link-check-report.json'));
+    }
+
+    public function test_handle_creates_report_with_correct_structure(): void
+    {
+        // Arrange
+        Http::fake([
+            '*' => Http::response('OK', 200),
+        ]);
+
+        // Act
+        $this->artisan('links:check --external');
+
+        // Assert
+        $reportPath = storage_path('logs/link-check-report.json');
+        $this->assertFileExists($reportPath);
+
+        $report = json_decode(File::get($reportPath), true);
+        $this->assertArrayHasKey('timestamp', $report);
+        $this->assertArrayHasKey('total_checked', $report);
+        $this->assertArrayHasKey('working_links', $report);
+        $this->assertArrayHasKey('broken_links', $report);
+        $this->assertArrayHasKey('broken_links_details', $report);
+        $this->assertArrayHasKey('working_links_details', $report);
+    }
+
+    public function test_handle_handles_multiple_options_correctly(): void
+    {
+        // Arrange
+        Http::fake([
+            '*' => Http::response('OK', 200),
+        ]);
+
+        // Act
+        $this->artisan('links:check --internal --external --all')
+            ->expectsOutput('🔗 Starting comprehensive link checking...')
+            ->expectsOutput('🔍 Checking internal links...')
+            ->expectsOutput('🌐 Checking external links...')
+            ->expectsOutput('📊 Link Check Report')
+            ->expectsOutput('==================')
+            ->expectsOutput('✅ All links are working correctly!')
+            ->assertExitCode(0);
+    }
+
+    /**
+     * Helper method to invoke private methods for testing
+     */
+    private function invokeMethod(object $object, string $methodName, array $parameters = []): mixed
+    {
+        $reflection = new \ReflectionClass(get_class($object));
+        $method = $reflection->getMethod($methodName);
+        $method->setAccessible(true);
+
+        return $method->invokeArgs($object, $parameters);
+    }
+}
