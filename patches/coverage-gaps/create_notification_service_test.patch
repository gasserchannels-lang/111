--- /dev/null
+++ b/tests/Unit/Services/NotificationServiceTest.php
@@ -0,0 +1,200 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Tests\Unit\Services;
+
+use App\Models\User;
+use App\Models\Notification;
+use App\Services\NotificationService;
+use Illuminate\Foundation\Testing\RefreshDatabase;
+use Illuminate\Support\Facades\Mail;
+use Illuminate\Support\Facades\Queue;
+use Tests\TestCase;
+use Mockery;

+class NotificationServiceTest extends TestCase
+{
+    use RefreshDatabase;
+
+    private NotificationService $notificationService;
+
+    protected function setUp(): void
+    {
+        parent::setUp();
+        $this->notificationService = new NotificationService();
+    }
+
+    protected function tearDown(): void
+    {
+        Mockery::close();
+        parent::tearDown();
+    }
+
+    public function test_send_notification_creates_database_record(): void
+    {
+        // Arrange
+        $user = User::factory()->create();
+        $title = 'Test Notification';
+        $message = 'This is a test notification';
+        $type = 'info';
+
+        // Act
+        $result = $this->notificationService->sendNotification($user->id, $title, $message, $type);
+
+        // Assert
+        $this->assertTrue($result);
+        $this->assertDatabaseHas('notifications', [
+            'user_id' => $user->id,
+            'title' => $title,
+            'message' => $message,
+            'type' => $type,
+            'is_read' => false,
+        ]);
+    }
+
+    public function test_send_notification_returns_false_for_invalid_user(): void
+    {
+        // Arrange
+        $invalidUserId = 99999;
+        $title = 'Test Notification';
+        $message = 'This is a test notification';
+        $type = 'info';
+
+        // Act
+        $result = $this->notificationService->sendNotification($invalidUserId, $title, $message, $type);
+
+        // Assert
+        $this->assertFalse($result);
+        $this->assertDatabaseMissing('notifications', [
+            'user_id' => $invalidUserId,
+        ]);
+    }
+
+    public function test_send_notification_handles_empty_title(): void
+    {
+        // Arrange
+        $user = User::factory()->create();
+        $title = '';
+        $message = 'This is a test notification';
+        $type = 'info';
+
+        // Act
+        $result = $this->notificationService->sendNotification($user->id, $title, $message, $type);
+
+        // Assert
+        $this->assertFalse($result);
+    }
+
+    public function test_send_notification_handles_empty_message(): void
+    {
+        // Arrange
+        $user = User::factory()->create();
+        $title = 'Test Notification';
+        $message = '';
+        $type = 'info';
+
+        // Act
+        $result = $this->notificationService->sendNotification($user->id, $title, $message, $type);
+
+        // Assert
+        $this->assertFalse($result);
+    }
+
+    public function test_send_notification_handles_invalid_type(): void
+    {
+        // Arrange
+        $user = User::factory()->create();
+        $title = 'Test Notification';
+        $message = 'This is a test notification';
+        $type = 'invalid_type';
+
+        // Act
+        $result = $this->notificationService->sendNotification($user->id, $title, $message, $type);
+
+        // Assert
+        $this->assertFalse($result);
+    }
+
+    public function test_send_notification_handles_different_types(): void
+    {
+        // Arrange
+        $user = User::factory()->create();
+        $title = 'Test Notification';
+        $message = 'This is a test notification';
+        $types = ['info', 'success', 'warning', 'error'];
+
+        foreach ($types as $type) {
+            // Act
+            $result = $this->notificationService->sendNotification($user->id, $title, $message, $type);
+
+            // Assert
+            $this->assertTrue($result);
+            $this->assertDatabaseHas('notifications', [
+                'user_id' => $user->id,
+                'type' => $type,
+            ]);
+        }
+    }
+
+    public function test_send_notification_handles_long_message(): void
+    {
+        // Arrange
+        $user = User::factory()->create();
+        $title = 'Test Notification';
+        $message = str_repeat('This is a very long message. ', 100);
+        $type = 'info';
+
+        // Act
+        $result = $this->notificationService->sendNotification($user->id, $title, $message, $type);
+
+        // Assert
+        $this->assertTrue($result);
+        $this->assertDatabaseHas('notifications', [
+            'user_id' => $user->id,
+            'message' => $message,
+        ]);
+    }
+
+    public function test_send_notification_handles_special_characters(): void
+    {
+        // Arrange
+        $user = User::factory()->create();
+        $title = 'Test Notification with Special Chars: @#$%^&*()';
+        $message = 'Message with special chars: <script>alert("test")</script>';
+        $type = 'info';
+
+        // Act
+        $result = $this->notificationService->sendNotification($user->id, $title, $message, $type);
+
+        // Assert
+        $this->assertTrue($result);
+        $this->assertDatabaseHas('notifications', [
+            'user_id' => $user->id,
+            'title' => $title,
+            'message' => $message,
+        ]);
+    }
+
+    public function test_send_notification_handles_unicode_characters(): void
+    {
+        // Arrange
+        $user = User::factory()->create();
+        $title = 'إشعار تجريبي';
+        $message = 'هذه رسالة تجريبية باللغة العربية';
+        $type = 'info';
+
+        // Act
+        $result = $this->notificationService->sendNotification($user->id, $title, $message, $type);
+
+        // Assert
+        $this->assertTrue($result);
+        $this->assertDatabaseHas('notifications', [
+            'user_id' => $user->id,
+            'title' => $title,
+            'message' => $message,
+        ]);
+    }
+
+    public function test_send_notification_handles_multiple_notifications_for_same_user(): void
+    {
+        // Arrange
+        $user = User::factory()->create();
+        $notifications = [
            ['title' => 'Notification 1', 'message' => 'Message 1', 'type' => 'info'],
            ['title' => 'Notification 2', 'message' => 'Message 2', 'type' => 'success'],
            ['title' => 'Notification 3', 'message' => 'Message 3', 'type' => 'warning'],
        ];

        foreach ($notifications as $notification) {
            // Act
            $result = $this->notificationService->sendNotification(
                $user->id,
                $notification['title'],
                $notification['message'],
                $notification['type']
            );

            // Assert
            $this->assertTrue($result);
        }

        // Assert total count
        $this->assertDatabaseCount('notifications', 3);
        $this->assertEquals(3, Notification::where('user_id', $user->id)->count());
    }

    public function test_send_notification_handles_database_exception(): void
    {
        // Arrange
        $user = User::factory()->create();
        $title = 'Test Notification';
        $message = 'This is a test notification';
        $type = 'info';

        // Mock database exception
        $this->mock(Notification::class, function ($mock) {
            $mock->shouldReceive('create')
                ->andThrow(new \Exception('Database error'));
        });

        // Act
        $result = $this->notificationService->sendNotification($user->id, $title, $message, $type);

        // Assert
        $this->assertFalse($result);
    }

    public function test_send_notification_handles_null_user_id(): void
    {
        // Arrange
        $title = 'Test Notification';
        $message = 'This is a test notification';
        $type = 'info';

        // Act
        $result = $this->notificationService->sendNotification(null, $title, $message, $type);

        // Assert
        $this->assertFalse($result);
    }

    public function test_send_notification_handles_negative_user_id(): void
    {
        // Arrange
        $title = 'Test Notification';
        $message = 'This is a test notification';
        $type = 'info';

        // Act
        $result = $this->notificationService->sendNotification(-1, $title, $message, $type);

        // Assert
        $this->assertFalse($result);
    }

    public function test_send_notification_handles_zero_user_id(): void
    {
        // Arrange
        $title = 'Test Notification';
        $message = 'This is a test notification';
        $type = 'info';

        // Act
        $result = $this->notificationService->sendNotification(0, $title, $message, $type);

        // Assert
        $this->assertFalse($result);
    }

    public function test_send_notification_handles_very_long_title(): void
    {
        // Arrange
        $user = User::factory()->create();
        $title = str_repeat('Very long title ', 50);
        $message = 'This is a test notification';
        $type = 'info';

        // Act
        $result = $this->notificationService->sendNotification($user->id, $title, $message, $type);

        // Assert
        $this->assertTrue($result);
        $this->assertDatabaseHas('notifications', [
            'user_id' => $user->id,
            'title' => $title,
        ]);
    }

    public function test_send_notification_handles_very_long_message(): void
    {
        // Arrange
        $user = User::factory()->create();
        $title = 'Test Notification';
        $message = str_repeat('Very long message ', 1000);
        $type = 'info';

        // Act
        $result = $this->notificationService->sendNotification($user->id, $title, $message, $type);

        // Assert
        $this->assertTrue($result);
        $this->assertDatabaseHas('notifications', [
            'user_id' => $user->id,
            'message' => $message,
        ]);
    }
}
