stages:
    - analyze
    - report
    - fix
    - test
    - verify
    - deploy

cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
        - vendor/
        - node_modules/
        - storage/logs/

variables:
    PHP_MEMORY_LIMIT: 1G
    COMPOSER_MEMORY_LIMIT: 1G

# ========================================
# Analysis Stage
# ========================================
analyze_code_quality:
    stage: analyze
    image: php:8.2-cli
    before_script:
        - apt-get update && apt-get install -y curl unzip
        - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        - apt-get install -y nodejs
        - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    script:
        - cp .env.example .env
        - composer install --prefer-dist --no-progress --no-ansi --ignore-platform-req=ext-zip --no-scripts
        - php artisan key:generate
        - php artisan config:cache
        - php artisan package:discover --ansi
        - npm install
        - npm run build
        - echo "Starting Code Quality Analysis..."
        - composer audit --format=json > storage/logs/composer-audit.json || true
        - ./vendor/bin/phpstan analyse --memory-limit=1G --error-format=json --configuration=phpstan.strict.neon > storage/logs/phpstan.json
        - ./vendor/bin/phpmd app xml phpmd.strict.xml --reportfile storage/logs/phpmd.xml
        - ./vendor/bin/pint --test --json --config=pint.strict.json > storage/logs/pint.json
    artifacts:
        paths:
            - vendor/
            - node_modules/
            - public/
            - .env
            - storage/logs/
        expire_in: 1 hour

analyze_security:
    stage: analyze
    image: php:8.2-cli
    before_script:
        - apt-get update && apt-get install -y curl unzip
        - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        - apt-get install -y nodejs
        - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    needs:
        - job: analyze_code_quality
          artifacts: true
    script:
        - echo "Starting Security Analysis..."
        - composer audit --format=json > storage/logs/security-audit.json || true
        - php artisan test tests/Security/ --configuration=phpunit.strict.xml --log-junit=storage/logs/security-tests.xml || true
    artifacts:
        paths:
            - storage/logs/
        expire_in: 1 hour

analyze_performance:
    stage: analyze
    image: php:8.2-cli
    before_script:
        - apt-get update && apt-get install -y curl unzip
        - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        - apt-get install -y nodejs
        - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    needs:
        - job: analyze_code_quality
          artifacts: true
    script:
        - echo "Starting Performance Analysis..."
        - php artisan test tests/Performance/ --configuration=phpunit.testing.xml --log-junit=storage/logs/performance-tests.xml || true
    artifacts:
        paths:
            - storage/logs/
        expire_in: 1 hour

# ========================================
# Report Generation Stage
# ========================================
generate_reports:
    stage: report
    image: php:8.2-cli
    before_script:
        - apt-get update && apt-get install -y curl unzip
        - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        - apt-get install -y nodejs
        - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    needs:
        - job: analyze_code_quality
          artifacts: true
        - job: analyze_security
          artifacts: true
        - job: analyze_performance
          artifacts: true
    script:
        - echo "Generating Comprehensive Reports..."
        - composer install --prefer-dist --no-progress --no-ansi --ignore-platform-req=ext-zip --no-scripts
        - php artisan key:generate
        - php artisan config:cache
        - php artisan package:discover --ansi
        - mkdir -p reports
        - |
            cat > reports/analysis-report.md << 'EOF'
            # Analysis Report
            ## Code Quality Analysis
            - PHPStan: N/A
            - PHPMD: N/A
            - Laravel Pint: N/A
            ## Security Analysis
            - Composer Audit: N/A
            ## Performance Analysis
            - Performance Tests: N/A
            EOF
        - echo "Reports generated successfully"
    artifacts:
        paths:
            - storage/logs/
            - reports/
        expire_in: 1 day

# ========================================
# Auto-Fix Stage
# ========================================
auto_fix_code_style:
    stage: fix
    image: php:8.2-cli
    before_script:
        - apt-get update && apt-get install -y curl unzip
        - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        - apt-get install -y nodejs
        - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    needs:
        - job: generate_reports
          artifacts: true
    script:
        - echo "Starting Auto-Fix Process..."
        - composer install --prefer-dist --no-progress --no-ansi --ignore-platform-req=ext-zip --no-scripts
        - php artisan key:generate
        - php artisan config:cache
        - php artisan package:discover --ansi
        - echo "Auto-fixing code style with Laravel Pint..."
        - ./vendor/bin/pint --dirty
        - echo "Code style auto-fix completed"
    artifacts:
        paths:
            - vendor/
            - node_modules/
            - public/
            - .env
        expire_in: 1 hour

auto_fix_dependencies:
    stage: fix
    image: php:8.2-cli
    before_script:
        - apt-get update && apt-get install -y curl unzip
        - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        - apt-get install -y nodejs
        - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    needs:
        - job: auto_fix_code_style
          artifacts: true
    script:
        - echo "Auto-fixing dependencies..."
        - composer update --prefer-dist --no-progress --no-ansi --ignore-platform-req=ext-zip --no-scripts
        - composer audit --fix || true
        - echo "Dependencies auto-fix completed"
    artifacts:
        paths:
            - vendor/
            - node_modules/
            - public/
            - .env
        expire_in: 1 hour

# ========================================
# Testing Stage
# ========================================
test_unit:
    stage: test
    image: php:8.2-cli
    before_script:
        - apt-get update && apt-get install -y curl unzip
        - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        - apt-get install -y nodejs
        - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    services:
        - name: mysql:8.0
          alias: mysql
    variables:
        DB_HOST: mysql
    needs:
        - job: auto_fix_dependencies
          artifacts: true
    script:
        - echo "Running Unit Tests..."
        - until mysqladmin ping -h mysql --silent; do echo "Waiting for MySQL..."; sleep 2; done
        - php artisan migrate --force
        - php artisan test tests/Unit/ --configuration=phpunit.strict.xml --log-junit=storage/logs/unit-tests.xml
    artifacts:
        when: always
        reports:
            junit: storage/logs/unit-tests.xml

test_ai:
    stage: test
    image: php:8.2-cli
    before_script:
        - apt-get update && apt-get install -y curl unzip
        - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        - apt-get install -y nodejs
        - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    needs:
        - job: auto_fix_dependencies
          artifacts: true
    script:
        - echo "Running AI Tests..."
        - php artisan test tests/AI/ --configuration=phpunit.strict.xml --log-junit=storage/logs/ai-tests.xml
    artifacts:
        when: always
        reports:
            junit: storage/logs/ai-tests.xml

test_integration:
    stage: test
    image: php:8.2-cli
    before_script:
        - apt-get update && apt-get install -y curl unzip
        - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        - apt-get install -y nodejs
        - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    services:
        - name: mysql:8.0
          alias: mysql
    variables:
        DB_HOST: mysql
    needs:
        - job: auto_fix_dependencies
          artifacts: true
    script:
        - echo "Running Integration Tests..."
        - until mysqladmin ping -h mysql --silent; do echo "Waiting for MySQL..."; sleep 2; done
        - php artisan migrate --force
        - php artisan test tests/Integration/ --configuration=phpunit.strict.xml --log-junit=storage/logs/integration-tests.xml
    artifacts:
        when: always
        reports:
            junit: storage/logs/integration-tests.xml

test_e2e:
    stage: test
    image: php:8.2-cli
    before_script:
        - apt-get update && apt-get install -y curl unzip chromium
        - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        - apt-get install -y nodejs
        - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    services:
        - name: mysql:8.0
          alias: mysql
    variables:
        DB_HOST: mysql
        APP_URL: http://localhost:8000
    needs:
        - job: auto_fix_dependencies
          artifacts: true
    script:
        - echo "Running E2E Tests..."
        - until mysqladmin ping -h mysql --silent; do echo "Waiting for MySQL..."; sleep 2; done
        - php artisan migrate --force
        - php artisan serve --host=0.0.0.0 --port=8000 &
        - sleep 10
        - php artisan dusk --configuration=phpunit.testing.xml --log-junit=storage/logs/e2e-tests.xml
    artifacts:
        when: always
        reports:
            junit: storage/logs/e2e-tests.xml

test_links:
    stage: test
    image: php:8.2-cli
    before_script:
        - apt-get update && apt-get install -y curl unzip
        - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        - apt-get install -y nodejs
        - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    services:
        - name: mysql:8.0
          alias: mysql
    variables:
        DB_HOST: mysql
    needs:
        - job: auto_fix_dependencies
          artifacts: true
    script:
        - echo "Running Link Checker Tests..."
        - until mysqladmin ping -h mysql --silent; do echo "Waiting for MySQL..."; sleep 2; done
        - php artisan migrate --force
        - php artisan test tests/Feature/LinkCheckerTest.php --configuration=phpunit.strict.xml --log-junit=storage/logs/link-checker-tests.xml
        - php artisan links:check --all
        - php artisan ai:test-quality-system --full
    artifacts:
        when: always
        reports:
            junit: storage/logs/link-checker-tests.xml
        paths:
            - storage/logs/link-check-report.json

# ========================================
# Verification Stage
# ========================================
verify_quality:
    stage: verify
    image: php:8.2-cli
    before_script:
        - apt-get update && apt-get install -y curl unzip
        - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        - apt-get install -y nodejs
        - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    needs:
        - job: test_unit
          artifacts: true
        - job: test_ai
          artifacts: true
        - job: test_integration
          artifacts: true
    script:
        - echo "Final Quality Verification..."
        - composer install --prefer-dist --no-progress --no-ansi --ignore-platform-req=ext-zip --no-scripts
        - php artisan key:generate
        - php artisan config:cache
        - php artisan package:discover --ansi
        - echo "Re-running quality checks..."
        - ./vendor/bin/phpstan analyse --memory-limit=1G --configuration=phpstan.strict.neon
        - ./vendor/bin/phpmd app xml phpmd.strict.xml
        - ./vendor/bin/pint --test --config=pint.strict.json
        - composer audit
        - echo "All quality checks passed!"
    artifacts:
        paths:
            - storage/logs/
        expire_in: 1 day

verify_security:
    stage: verify
    image: php:8.2-cli
    before_script:
        - apt-get update && apt-get install -y curl unzip
        - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        - apt-get install -y nodejs
        - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    needs:
        - job: verify_quality
          artifacts: true
    script:
        - echo "Final Security Verification..."
        - composer install --prefer-dist --no-progress --no-ansi --ignore-platform-req=ext-zip --no-scripts
        - php artisan key:generate
        - php artisan config:cache
        - php artisan package:discover --ansi
        - echo "Re-running security tests..."
        - php artisan test tests/Security/ --configuration=phpunit.strict.xml
        - composer audit
        - echo "All security checks passed!"
    artifacts:
        paths:
            - storage/logs/
        expire_in: 1 day

# ========================================
# Deployment Stage
# ========================================
deploy_staging:
    stage: deploy
    image: php:8.2-cli
    before_script:
        - apt-get update && apt-get install -y curl unzip
        - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        - apt-get install -y nodejs
        - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    needs:
        - job: verify_security
          artifacts: true
    script:
        - echo "Deploying to Staging..."
        - echo "All stages completed successfully!"
        - echo "Project is ready for deployment!"
    when: manual
    only:
        - main
